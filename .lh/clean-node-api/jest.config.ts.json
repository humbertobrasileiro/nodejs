{
    "sourceFile": "clean-node-api/jest.config.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1659473348407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1659473484023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,12 @@\n   // Indicates whether the coverage information should be collected while executing the test\n   // collectCoverage: false,\n \n   // An array of glob patterns indicating a set of files for which coverage information should be collected\n-  collectCoverageFrom: ['<rootDir>/src/**/*.ts'],\n+  collectCoverageFrom: [\"<rootDir>/src/**/*.ts\"],\n \n   // The directory where Jest should output its coverage files\n-  coverageDirectory: 'coverage',\n+  coverageDirectory: \"coverage\",\n \n   // An array of regexp pattern strings used to skip coverage collection\n   // coveragePathIgnorePatterns: [\n   //   \"\\\\\\\\node_modules\\\\\\\\\"\n@@ -143,9 +143,9 @@\n   // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n   // snapshotSerializers: [],\n \n   // The test environment that will be used for testing\n-  // testEnvironment: \"jest-environment-node\",\n+  testEnvironment: \"node\",\n \n   // Options that will be passed to the testEnvironment\n   // testEnvironmentOptions: {},\n \n@@ -172,9 +172,9 @@\n   // This option allows use of a custom test runner\n   // testRunner: \"jest-circus/runner\",\n \n   // A map from regular expressions to paths to transformers\n-  // transform: undefined,\n+  transform: null,\n \n   // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n   // transformIgnorePatterns: [\n   //   \"\\\\\\\\node_modules\\\\\\\\\",\n"
                },
                {
                    "date": 1659473540659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,11 @@\n   // This option allows use of a custom test runner\n   // testRunner: \"jest-circus/runner\",\n \n   // A map from regular expressions to paths to transformers\n-  transform: null,\n+  transform: {\n+    '.+\\\\.ts$': 'ts-jest'\n+  },\n \n   // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n   // transformIgnorePatterns: [\n   //   \"\\\\\\\\node_modules\\\\\\\\\",\n"
                },
                {
                    "date": 1659473597446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,11 +123,11 @@\n   // The root directory that Jest should scan for tests and modules within\n   // rootDir: undefined,\n \n   // A list of paths to directories that Jest should use to search for files in\n-  // roots: [\n-  //   \"<rootDir>\"\n-  // ],\n+  roots: [\n+     \"<rootDir>/src\"\n+  ],\n \n   // Allows you to use a custom runner instead of Jest's default test runner\n   // runner: \"jest-runner\",\n \n"
                },
                {
                    "date": 1659473827337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,12 @@\n   // Indicates whether the coverage information should be collected while executing the test\n   // collectCoverage: false,\n \n   // An array of glob patterns indicating a set of files for which coverage information should be collected\n-  collectCoverageFrom: [\"<rootDir>/src/**/*.ts\"],\n+  collectCoverageFrom: ['<rootDir>/src/**/*.ts'],\n \n   // The directory where Jest should output its coverage files\n-  coverageDirectory: \"coverage\",\n+  coverageDirectory: 'coverage',\n \n   // An array of regexp pattern strings used to skip coverage collection\n   // coveragePathIgnorePatterns: [\n   //   \"\\\\\\\\node_modules\\\\\\\\\"\n@@ -124,9 +124,9 @@\n   // rootDir: undefined,\n \n   // A list of paths to directories that Jest should use to search for files in\n   roots: [\n-     \"<rootDir>/src\"\n+     '<rootDir>/src'\n   ],\n \n   // Allows you to use a custom runner instead of Jest's default test runner\n   // runner: \"jest-runner\",\n@@ -143,9 +143,9 @@\n   // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n   // snapshotSerializers: [],\n \n   // The test environment that will be used for testing\n-  testEnvironment: \"node\",\n+  testEnvironment: 'node',\n \n   // Options that will be passed to the testEnvironment\n   // testEnvironmentOptions: {},\n \n"
                },
                {
                    "date": 1659474097473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,195 +3,14 @@\n  * https://jestjs.io/docs/configuration\n  */\n \n export default {\n-  // All imported modules in your tests should be mocked automatically\n-  // automock: false,\n-\n-  // Stop running tests after `n` failures\n-  // bail: 0,\n-\n-  // The directory where Jest should store its cached dependency information\n-  // cacheDirectory: \"C:\\\\Users\\\\carlos.toscano\\\\AppData\\\\Local\\\\Temp\\\\jest\",\n-\n-  // Automatically clear mock calls, instances, contexts and results before every test\n-  clearMocks: true,\n-\n-  // Indicates whether the coverage information should be collected while executing the test\n-  // collectCoverage: false,\n-\n-  // An array of glob patterns indicating a set of files for which coverage information should be collected\n   collectCoverageFrom: ['<rootDir>/src/**/*.ts'],\n-\n-  // The directory where Jest should output its coverage files\n   coverageDirectory: 'coverage',\n-\n-  // An array of regexp pattern strings used to skip coverage collection\n-  // coveragePathIgnorePatterns: [\n-  //   \"\\\\\\\\node_modules\\\\\\\\\"\n-  // ],\n-\n-  // Indicates which provider should be used to instrument code for coverage\n-  // coverageProvider: \"babel\",\n-\n-  // A list of reporter names that Jest uses when writing coverage reports\n-  // coverageReporters: [\n-  //   \"json\",\n-  //   \"text\",\n-  //   \"lcov\",\n-  //   \"clover\"\n-  // ],\n-\n-  // An object that configures minimum threshold enforcement for coverage results\n-  // coverageThreshold: undefined,\n-\n-  // A path to a custom dependency extractor\n-  // dependencyExtractor: undefined,\n-\n-  // Make calling deprecated APIs throw helpful error messages\n-  // errorOnDeprecated: false,\n-\n-  // The default configuration for fake timers\n-  // fakeTimers: {\n-  //   \"enableGlobally\": false\n-  // },\n-\n-  // Force coverage collection from ignored files using an array of glob patterns\n-  // forceCoverageMatch: [],\n-\n-  // A path to a module which exports an async function that is triggered once before all test suites\n-  // globalSetup: undefined,\n-\n-  // A path to a module which exports an async function that is triggered once after all test suites\n-  // globalTeardown: undefined,\n-\n-  // A set of global variables that need to be available in all test environments\n-  // globals: {},\n-\n-  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n-  // maxWorkers: \"50%\",\n-\n-  // An array of directory names to be searched recursively up from the requiring module's location\n-  // moduleDirectories: [\n-  //   \"node_modules\"\n-  // ],\n-\n-  // An array of file extensions your modules use\n-  // moduleFileExtensions: [\n-  //   \"js\",\n-  //   \"mjs\",\n-  //   \"cjs\",\n-  //   \"jsx\",\n-  //   \"ts\",\n-  //   \"tsx\",\n-  //   \"json\",\n-  //   \"node\"\n-  // ],\n-\n-  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n-  // moduleNameMapper: {},\n-\n-  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n-  // modulePathIgnorePatterns: [],\n-\n-  // Activates notifications for test results\n-  // notify: false,\n-\n-  // An enum that specifies notification mode. Requires { notify: true }\n-  // notifyMode: \"failure-change\",\n-\n-  // A preset that is used as a base for Jest's configuration\n-  // preset: undefined,\n-\n-  // Run tests from one or more projects\n-  // projects: undefined,\n-\n-  // Use this configuration option to add custom reporters to Jest\n-  // reporters: undefined,\n-\n-  // Automatically reset mock state before every test\n-  // resetMocks: false,\n-\n-  // Reset the module registry before running each individual test\n-  // resetModules: false,\n-\n-  // A path to a custom resolver\n-  // resolver: undefined,\n-\n-  // Automatically restore mock state and implementation before every test\n-  // restoreMocks: false,\n-\n-  // The root directory that Jest should scan for tests and modules within\n-  // rootDir: undefined,\n-\n-  // A list of paths to directories that Jest should use to search for files in\n   roots: [\n      '<rootDir>/src'\n   ],\n-\n-  // Allows you to use a custom runner instead of Jest's default test runner\n-  // runner: \"jest-runner\",\n-\n-  // The paths to modules that run some code to configure or set up the testing environment before each test\n-  // setupFiles: [],\n-\n-  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n-  // setupFilesAfterEnv: [],\n-\n-  // The number of seconds after which a test is considered as slow and reported as such in the results.\n-  // slowTestThreshold: 5,\n-\n-  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n-  // snapshotSerializers: [],\n-\n-  // The test environment that will be used for testing\n   testEnvironment: 'node',\n-\n-  // Options that will be passed to the testEnvironment\n-  // testEnvironmentOptions: {},\n-\n-  // Adds a location field to test results\n-  // testLocationInResults: false,\n-\n-  // The glob patterns Jest uses to detect test files\n-  // testMatch: [\n-  //   \"**/__tests__/**/*.[jt]s?(x)\",\n-  //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n-  // ],\n-\n-  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n-  // testPathIgnorePatterns: [\n-  //   \"\\\\\\\\node_modules\\\\\\\\\"\n-  // ],\n-\n-  // The regexp pattern or array of patterns that Jest uses to detect test files\n-  // testRegex: [],\n-\n-  // This option allows the use of a custom results processor\n-  // testResultsProcessor: undefined,\n-\n-  // This option allows use of a custom test runner\n-  // testRunner: \"jest-circus/runner\",\n-\n-  // A map from regular expressions to paths to transformers\n   transform: {\n     '.+\\\\.ts$': 'ts-jest'\n-  },\n-\n-  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n-  // transformIgnorePatterns: [\n-  //   \"\\\\\\\\node_modules\\\\\\\\\",\n-  //   \"\\\\.pnp\\\\.[^\\\\\\\\]+$\"\n-  // ],\n-\n-  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n-  // unmockedModulePathPatterns: undefined,\n-\n-  // Indicates whether each individual test should be reported during the run\n-  // verbose: undefined,\n-\n-  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n-  // watchPathIgnorePatterns: [],\n-\n-  // Whether to use watchman for file crawling\n-  // watchman: true,\n+  }\n };\n"
                },
                {
                    "date": 1659474124008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,13 @@\n  * https://jestjs.io/docs/configuration\n  */\n \n export default {\n-  collectCoverageFrom: ['<rootDir>/src/**/*.ts'],\n+  roots: [\n+    '<rootDir>/src'\n+ ],\n+ collectCoverageFrom: ['<rootDir>/src/**/*.ts'],\n   coverageDirectory: 'coverage',\n-  roots: [\n-     '<rootDir>/src'\n-  ],\n   testEnvironment: 'node',\n   transform: {\n     '.+\\\\.ts$': 'ts-jest'\n   }\n"
                },
                {
                    "date": 1659474528371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,21 @@\n  * https://jestjs.io/docs/configuration\n  */\n \n export default {\n-  roots: [\n-    '<rootDir>/src'\n- ],\n- collectCoverageFrom: ['<rootDir>/src/**/*.ts'],\n+  roots: ['<rootDir>/tests'],\n+  collectCoverageFrom: [\n+    '<rootDir>/src/**/*.ts',\n+    '!<rootDir>/src/main/**'\n+  ],\n   coverageDirectory: 'coverage',\n+  coverageProvider: 'babel',\n   testEnvironment: 'node',\n+  preset: '@shelf/jest-mongodb',\n   transform: {\n     '.+\\\\.ts$': 'ts-jest'\n+  },\n+  moduleNameMapper: {\n+    '@/tests/(.*)': '<rootDir>/tests/$1',\n+    '@/(.*)': '<rootDir>/src/$1'\n   }\n };\n"
                },
                {
                    "date": 1659474595053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,5 @@\n-/*\n- * For a detailed explanation regarding each configuration property and type check, visit:\n- * https://jestjs.io/docs/configuration\n- */\n-\n-export default {\n+module.exports = {\n   roots: ['<rootDir>/tests'],\n   collectCoverageFrom: [\n     '<rootDir>/src/**/*.ts',\n     '!<rootDir>/src/main/**'\n@@ -19,5 +14,5 @@\n   moduleNameMapper: {\n     '@/tests/(.*)': '<rootDir>/tests/$1',\n     '@/(.*)': '<rootDir>/src/$1'\n   }\n-};\n+}\n"
                },
                {
                    "date": 1659531624670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,22 @@\n-module.exports = {\n+/*\n+ * For a detailed explanation regarding each configuration property and type check, visit:\n+ * https://jestjs.io/docs/configuration\n+ */\n+\n+export default { \n   roots: ['<rootDir>/tests'],\n   collectCoverageFrom: [\n     '<rootDir>/src/**/*.ts',\n     '!<rootDir>/src/main/**'\n   ],\n   coverageDirectory: 'coverage',\n   coverageProvider: 'babel',\n   testEnvironment: 'node',\n-  preset: '@shelf/jest-mongodb',\n   transform: {\n     '.+\\\\.ts$': 'ts-jest'\n   },\n   moduleNameMapper: {\n     '@/tests/(.*)': '<rootDir>/tests/$1',\n     '@/(.*)': '<rootDir>/src/$1'\n   }\n-}\n+};\n"
                }
            ],
            "date": 1659473348407,
            "name": "Commit-0",
            "content": "/*\n * For a detailed explanation regarding each configuration property and type check, visit:\n * https://jestjs.io/docs/configuration\n */\n\nexport default {\n  // All imported modules in your tests should be mocked automatically\n  // automock: false,\n\n  // Stop running tests after `n` failures\n  // bail: 0,\n\n  // The directory where Jest should store its cached dependency information\n  // cacheDirectory: \"C:\\\\Users\\\\carlos.toscano\\\\AppData\\\\Local\\\\Temp\\\\jest\",\n\n  // Automatically clear mock calls, instances, contexts and results before every test\n  clearMocks: true,\n\n  // Indicates whether the coverage information should be collected while executing the test\n  // collectCoverage: false,\n\n  // An array of glob patterns indicating a set of files for which coverage information should be collected\n  collectCoverageFrom: ['<rootDir>/src/**/*.ts'],\n\n  // The directory where Jest should output its coverage files\n  coverageDirectory: 'coverage',\n\n  // An array of regexp pattern strings used to skip coverage collection\n  // coveragePathIgnorePatterns: [\n  //   \"\\\\\\\\node_modules\\\\\\\\\"\n  // ],\n\n  // Indicates which provider should be used to instrument code for coverage\n  // coverageProvider: \"babel\",\n\n  // A list of reporter names that Jest uses when writing coverage reports\n  // coverageReporters: [\n  //   \"json\",\n  //   \"text\",\n  //   \"lcov\",\n  //   \"clover\"\n  // ],\n\n  // An object that configures minimum threshold enforcement for coverage results\n  // coverageThreshold: undefined,\n\n  // A path to a custom dependency extractor\n  // dependencyExtractor: undefined,\n\n  // Make calling deprecated APIs throw helpful error messages\n  // errorOnDeprecated: false,\n\n  // The default configuration for fake timers\n  // fakeTimers: {\n  //   \"enableGlobally\": false\n  // },\n\n  // Force coverage collection from ignored files using an array of glob patterns\n  // forceCoverageMatch: [],\n\n  // A path to a module which exports an async function that is triggered once before all test suites\n  // globalSetup: undefined,\n\n  // A path to a module which exports an async function that is triggered once after all test suites\n  // globalTeardown: undefined,\n\n  // A set of global variables that need to be available in all test environments\n  // globals: {},\n\n  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n  // maxWorkers: \"50%\",\n\n  // An array of directory names to be searched recursively up from the requiring module's location\n  // moduleDirectories: [\n  //   \"node_modules\"\n  // ],\n\n  // An array of file extensions your modules use\n  // moduleFileExtensions: [\n  //   \"js\",\n  //   \"mjs\",\n  //   \"cjs\",\n  //   \"jsx\",\n  //   \"ts\",\n  //   \"tsx\",\n  //   \"json\",\n  //   \"node\"\n  // ],\n\n  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n  // moduleNameMapper: {},\n\n  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n  // modulePathIgnorePatterns: [],\n\n  // Activates notifications for test results\n  // notify: false,\n\n  // An enum that specifies notification mode. Requires { notify: true }\n  // notifyMode: \"failure-change\",\n\n  // A preset that is used as a base for Jest's configuration\n  // preset: undefined,\n\n  // Run tests from one or more projects\n  // projects: undefined,\n\n  // Use this configuration option to add custom reporters to Jest\n  // reporters: undefined,\n\n  // Automatically reset mock state before every test\n  // resetMocks: false,\n\n  // Reset the module registry before running each individual test\n  // resetModules: false,\n\n  // A path to a custom resolver\n  // resolver: undefined,\n\n  // Automatically restore mock state and implementation before every test\n  // restoreMocks: false,\n\n  // The root directory that Jest should scan for tests and modules within\n  // rootDir: undefined,\n\n  // A list of paths to directories that Jest should use to search for files in\n  // roots: [\n  //   \"<rootDir>\"\n  // ],\n\n  // Allows you to use a custom runner instead of Jest's default test runner\n  // runner: \"jest-runner\",\n\n  // The paths to modules that run some code to configure or set up the testing environment before each test\n  // setupFiles: [],\n\n  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n  // setupFilesAfterEnv: [],\n\n  // The number of seconds after which a test is considered as slow and reported as such in the results.\n  // slowTestThreshold: 5,\n\n  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n  // snapshotSerializers: [],\n\n  // The test environment that will be used for testing\n  // testEnvironment: \"jest-environment-node\",\n\n  // Options that will be passed to the testEnvironment\n  // testEnvironmentOptions: {},\n\n  // Adds a location field to test results\n  // testLocationInResults: false,\n\n  // The glob patterns Jest uses to detect test files\n  // testMatch: [\n  //   \"**/__tests__/**/*.[jt]s?(x)\",\n  //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n  // ],\n\n  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n  // testPathIgnorePatterns: [\n  //   \"\\\\\\\\node_modules\\\\\\\\\"\n  // ],\n\n  // The regexp pattern or array of patterns that Jest uses to detect test files\n  // testRegex: [],\n\n  // This option allows the use of a custom results processor\n  // testResultsProcessor: undefined,\n\n  // This option allows use of a custom test runner\n  // testRunner: \"jest-circus/runner\",\n\n  // A map from regular expressions to paths to transformers\n  // transform: undefined,\n\n  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n  // transformIgnorePatterns: [\n  //   \"\\\\\\\\node_modules\\\\\\\\\",\n  //   \"\\\\.pnp\\\\.[^\\\\\\\\]+$\"\n  // ],\n\n  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n  // unmockedModulePathPatterns: undefined,\n\n  // Indicates whether each individual test should be reported during the run\n  // verbose: undefined,\n\n  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n  // watchPathIgnorePatterns: [],\n\n  // Whether to use watchman for file crawling\n  // watchman: true,\n};\n"
        }
    ]
}