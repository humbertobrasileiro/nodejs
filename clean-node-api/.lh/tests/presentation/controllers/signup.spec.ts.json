{
    "sourceFile": "tests/presentation/controllers/signup.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1659534006938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1659534612906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,5 +14,21 @@\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n     expect(httpResponse.body).toEqual(new Error('Missing param: name'))\r\n   })\r\n+\r\n+  test('Should return 400 if no name is provided', () => {\r\n+    const sut = new SignUpController()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        // email: 'any_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new Error('Missing param: email'))\r\n+  })\r\n+\r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659534660117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     expect(httpResponse.statusCode).toBe(400)\r\n     expect(httpResponse.body).toEqual(new Error('Missing param: name'))\r\n   })\r\n \r\n-  test('Should return 400 if no name is provided', () => {\r\n+  test('Should return 400 if no email is provided', () => {\r\n     const sut = new SignUpController()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n"
                },
                {
                    "date": 1659537260580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n+import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n \r\n describe('SignUp Controller', () => {\r\n   test('Should return 400 if no name is provided', () => {\r\n     const sut = new SignUpController()\r\n@@ -12,9 +13,9 @@\n       }\r\n     }\r\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new Error('Missing param: name'))\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('name'))\r\n   })\r\n \r\n   test('Should return 400 if no email is provided', () => {\r\n     const sut = new SignUpController()\r\n@@ -27,8 +28,8 @@\n       }\r\n     }\r\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new Error('Missing param: email'))\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n   })\r\n \r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659537529255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n   test('Should return 400 if no name is provided', () => {\r\n     const sut = new SignUpController()\r\n     const httpRequest = {\r\n       body: {\r\n-       // name: 'any_name',\r\n         email: 'any_email@mail.com',\r\n         password: 'any_password',\r\n         passwordConfirmation: 'any_password'\r\n       }\r\n"
                },
                {
                    "date": 1659543304618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,8 @@\n     const sut = new SignUpController()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n-        // email: 'any_email@mail.com',\r\n         password: 'any_password',\r\n         passwordConfirmation: 'any_password'\r\n       }\r\n     }\r\n@@ -30,5 +29,20 @@\n     expect(httpResponse.statusCode).toBe(400)\r\n     expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n   })\r\n \r\n+  test('Should return 400 if no password is provided', () => {\r\n+    const sut = new SignUpController()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n+  })\r\n+\r\n+\r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659543316016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n+import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n+\r\n+describe('SignUp Controller', () => {\r\n+  test('Should return 400 if no name is provided', () => {\r\n+    const sut = new SignUpController()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        email: 'any_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('name'))\r\n+  })\r\n+\r\n+  test('Should return 400 if no email is provided', () => {\r\n+    const sut = new SignUpController()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n+  })\r\n+\r\n+  test('Should return 400 if no password is provided', () => {\r\n+    const sut = new SignUpController()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('password'))\r\n+  })\r\n+\r\n+\r\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659543375500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,53 +44,5 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('password'))\r\n   })\r\n \r\n \r\n-})\n-import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n-import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n-\r\n-describe('SignUp Controller', () => {\r\n-  test('Should return 400 if no name is provided', () => {\r\n-    const sut = new SignUpController()\r\n-    const httpRequest = {\r\n-      body: {\r\n-        email: 'any_email@mail.com',\r\n-        password: 'any_password',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new MissingParamError('name'))\r\n-  })\r\n-\r\n-  test('Should return 400 if no email is provided', () => {\r\n-    const sut = new SignUpController()\r\n-    const httpRequest = {\r\n-      body: {\r\n-        name: 'any_name',\r\n-        password: 'any_password',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n-  })\r\n-\r\n-  test('Should return 400 if no password is provided', () => {\r\n-    const sut = new SignUpController()\r\n-    const httpRequest = {\r\n-      body: {\r\n-        name: 'any_name',\r\n-        email: 'any_email@mail.com',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n-  })\r\n-\r\n-\r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659543926399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,6 +43,19 @@\n     expect(httpResponse.statusCode).toBe(400)\r\n     expect(httpResponse.body).toEqual(new MissingParamError('password'))\r\n   })\r\n \r\n+  test('Should return 400 if no password confirmation is provided', () => {\r\n+    const sut = new SignUpController()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        password: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n+  })\r\n \r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659545096876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,11 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n \r\n+const makeSut = (): SignUpController => {\r\n+  return new SignUpController()\r\n+}\r\n+\r\n describe('SignUp Controller', () => {\r\n   test('Should return 400 if no name is provided', () => {\r\n     const sut = new SignUpController()\r\n     const httpRequest = {\r\n"
                },
                {
                    "date": 1659545167096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n \r\n const makeSut = (): SignUpController => {\r\n-  return new SignUpController()\r\n+  return makeSut()\r\n }\r\n \r\n describe('SignUp Controller', () => {\r\n   test('Should return 400 if no name is provided', () => {\r\n-    const sut = new SignUpController()\r\n+    const sut = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         email: 'any_email@mail.com',\r\n         password: 'any_password',\r\n@@ -20,9 +20,9 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('name'))\r\n   })\r\n \r\n   test('Should return 400 if no email is provided', () => {\r\n-    const sut = new SignUpController()\r\n+    const sut = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         password: 'any_password',\r\n@@ -34,9 +34,9 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n   })\r\n \r\n   test('Should return 400 if no password is provided', () => {\r\n-    const sut = new SignUpController()\r\n+    const sut = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'any_email@mail.com',\r\n@@ -48,9 +48,9 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('password'))\r\n   })\r\n \r\n   test('Should return 400 if no password confirmation is provided', () => {\r\n-    const sut = new SignUpController()\r\n+    const sut = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'any_email@mail.com',\r\n"
                },
                {
                    "date": 1659545200495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n \r\n const makeSut = (): SignUpController => {\r\n-  return makeSut()\r\n+  return new SignUpController()\r\n }\r\n \r\n describe('SignUp Controller', () => {\r\n   test('Should return 400 if no name is provided', () => {\r\n"
                },
                {
                    "date": 1659545660466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,6 +60,21 @@\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n     expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n   })\r\n+  \r\n+  test('Should return 400 if an invalid email is provided', () => {\r\n+    const sut = makeSut()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'invalid_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n+  })\r\n \r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659545708405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,8 @@\n       }\r\n     }\r\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n+    expect(httpResponse.body).toEqual(new InvalidParamError('email'))\r\n   })\r\n \r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659545826710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n+import { InvalidParamError } from '../../../src/presentation/errors/invalid-param-error'\r\n \r\n const makeSut = (): SignUpController => {\r\n   return new SignUpController()\r\n }\r\n"
                },
                {
                    "date": 1659546053329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,15 @@\n import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n import { InvalidParamError } from '../../../src/presentation/errors/invalid-param-error'\r\n \r\n const makeSut = (): SignUpController => {\r\n-  return new SignUpController()\r\n+  class EmailValidator {\r\n+    isValid (email: string): boolean {\r\n+      return true\r\n+    }\r\n+  }\r\n+  const emailValidator = new EmailValidator()\r\n+  return new SignUpController(emailValidator)\r\n }\r\n \r\n describe('SignUp Controller', () => {\r\n   test('Should return 400 if no name is provided', () => {\r\n"
                },
                {
                    "date": 1659546523346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,17 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n import { InvalidParamError } from '../../../src/presentation/errors/invalid-param-error'\r\n+import { EmailValidator } from '../../../src/presentation/protocols/email-validator'\r\n \r\n const makeSut = (): SignUpController => {\r\n-  class EmailValidator {\r\n+  class EmailValidatorStub implements EmailValidator {\r\n     isValid (email: string): boolean {\r\n       return true\r\n     }\r\n   }\r\n-  const emailValidator = new EmailValidator()\r\n-  return new SignUpController(emailValidator)\r\n+  const emailValidatorStub = new EmailValidatorStub()\r\n+  return new SignUpController(emailValidatorStub)\r\n }\r\n \r\n describe('SignUp Controller', () => {\r\n   test('Should return 400 if no name is provided', () => {\r\n"
                },
                {
                    "date": 1659547496151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,25 @@\n import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n import { InvalidParamError } from '../../../src/presentation/errors/invalid-param-error'\r\n import { EmailValidator } from '../../../src/presentation/protocols/email-validator'\r\n \r\n-const makeSut = (): SignUpController => {\r\n+interface SutTypes {\r\n+  sut: SignUpController\r\n+  emailValidatorStub: EmailValidator\r\n+}\r\n+\r\n+const makeSut = (): SutTypes => {\r\n   class EmailValidatorStub implements EmailValidator {\r\n     isValid (email: string): boolean {\r\n       return true\r\n     }\r\n   }\r\n   const emailValidatorStub = new EmailValidatorStub()\r\n-  return new SignUpController(emailValidatorStub)\r\n+  const sut = new SignUpController(emailValidatorStub)\r\n+  return {\r\n+    sut,\r\n+    emailValidatorStub\r\n+  }\r\n }\r\n \r\n describe('SignUp Controller', () => {\r\n   test('Should return 400 if no name is provided', () => {\r\n"
                },
                {
                    "date": 1659547582929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n }\r\n \r\n describe('SignUp Controller', () => {\r\n   test('Should return 400 if no name is provided', () => {\r\n-    const sut = makeSut()\r\n+    const { sut } = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         email: 'any_email@mail.com',\r\n         password: 'any_password',\r\n"
                },
                {
                    "date": 1659547607095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('name'))\r\n   })\r\n \r\n   test('Should return 400 if no email is provided', () => {\r\n-    const sut = makeSut()\r\n+    const { sut } = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         password: 'any_password',\r\n"
                },
                {
                    "date": 1659547630723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n   })\r\n \r\n   test('Should return 400 if no password is provided', () => {\r\n-    const sut = makeSut()\r\n+    const { sut } = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'any_email@mail.com',\r\n"
                },
                {
                    "date": 1659547655006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('password'))\r\n   })\r\n \r\n   test('Should return 400 if no password confirmation is provided', () => {\r\n-    const sut = makeSut()\r\n+    const { sut } = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'any_email@mail.com',\r\n"
                },
                {
                    "date": 1659547732559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n   })\r\n   \r\n   test('Should return 400 if an invalid email is provided', () => {\r\n-    const sut = makeSut()\r\n+    const { sut } = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'invalid_email@mail.com',\r\n"
                },
                {
                    "date": 1659547889199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,10 @@\n     expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n   })\r\n   \r\n   test('Should return 400 if an invalid email is provided', () => {\r\n-    const { sut } = makeSut()\r\n+    const { sut, emailValidatorStub } = makeSut()\r\n+    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'invalid_email@mail.com',\r\n"
                },
                {
                    "date": 1659549031064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,5 +94,20 @@\n     expect(httpResponse.statusCode).toBe(400)\r\n     expect(httpResponse.body).toEqual(new InvalidParamError('email'))\r\n   })\r\n \r\n+  test('Should call EmailValidator with correct email', () => {\r\n+    const { sut, emailValidatorStub } = makeSut()\r\n+    const isValidSpy = jest.spyOn(emailValidatorStub, 'isValid')\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    sut.handle(httpRequest)\r\n+    expect(isValidSpy).toHaveBeenCalledWith('')\r\n+  })\r\n+\r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659549053494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,8 @@\n         passwordConfirmation: 'any_password'\r\n       }\r\n     }\r\n     sut.handle(httpRequest)\r\n-    expect(isValidSpy).toHaveBeenCalledWith('')\r\n+    expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n   })\r\n \r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659549402243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,8 @@\n         passwordConfirmation: 'any_password'\r\n       }\r\n     }\r\n     sut.handle(httpRequest)\r\n-    expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n+    expect(isValidSpy).toHaveBeenCalledWith('email@mail.com')\r\n   })\r\n \r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659549465619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,8 @@\n         passwordConfirmation: 'any_password'\r\n       }\r\n     }\r\n     sut.handle(httpRequest)\r\n-    expect(isValidSpy).toHaveBeenCalledWith('email@mail.com')\r\n+    expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n   })\r\n \r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659550125312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n import { InvalidParamError } from '../../../src/presentation/errors/invalid-param-error'\r\n import { EmailValidator } from '../../../src/presentation/protocols/email-validator'\r\n+import { ServerError } from '../../../src/presentation/errors/server-error'\r\n \r\n interface SutTypes {\r\n   sut: SignUpController\r\n   emailValidatorStub: EmailValidator\r\n@@ -109,5 +110,29 @@\n     sut.handle(httpRequest)\r\n     expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n   })\r\n \r\n+  test('Should return 500 if EmailValidator throws', () => {\r\n+    class EmailValidatorThrow implements EmailValidator {\r\n+      isValid (email: string): boolean {\r\n+        throw new Error(\"\")        \r\n+      }\r\n+    }\r\n+    const emailValidatorThrow = new EmailValidatorThrow()\r\n+    const sutThrow = new SignUpController(emailValidatorThrow)\r\n+\r\n+    const { sutThrow, emailValidatorThrow } = makeSut()\r\n+    jest.spyOn(emailValidatorThrow, 'isValid').mockReturnValueOnce(false)\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(500)\r\n+    expect(httpResponse.body).toEqual(new ServerError())\r\n+  })\r\n+\r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659550166119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n         password: 'any_password',\r\n         passwordConfirmation: 'any_password'\r\n       }\r\n     }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n+    const httpResponse = sutThrow.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(500)\r\n     expect(httpResponse.body).toEqual(new ServerError())\r\n   })\r\n \r\n"
                },
                {
                    "date": 1659550882399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,17 +111,16 @@\n     expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n   })\r\n \r\n   test('Should return 500 if EmailValidator throws', () => {\r\n-    class EmailValidatorThrow implements EmailValidator {\r\n+    class EmailValidatorStub implements EmailValidator {\r\n       isValid (email: string): boolean {\r\n         throw new Error(\"\")        \r\n       }\r\n     }\r\n-    const emailValidatorThrow = new EmailValidatorThrow()\r\n+    const emailValidatorThrow = new EmailValidatorStub()\r\n     const sutThrow = new SignUpController(emailValidatorThrow)\r\n \r\n-    const { sutThrow, emailValidatorThrow } = makeSut()\r\n     jest.spyOn(emailValidatorThrow, 'isValid').mockReturnValueOnce(false)\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n"
                },
                {
                    "date": 1659550905319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n \r\n   test('Should return 500 if EmailValidator throws', () => {\r\n     class EmailValidatorStub implements EmailValidator {\r\n       isValid (email: string): boolean {\r\n-        throw new Error(\"\")        \r\n+        throw new Error()        \r\n       }\r\n     }\r\n     const emailValidatorThrow = new EmailValidatorStub()\r\n     const sutThrow = new SignUpController(emailValidatorThrow)\r\n"
                },
                {
                    "date": 1659550950618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n       isValid (email: string): boolean {\r\n         throw new Error()        \r\n       }\r\n     }\r\n-    const emailValidatorThrow = new EmailValidatorStub()\r\n+    const emailValidatorStub = new EmailValidatorStub()\r\n     const sutThrow = new SignUpController(emailValidatorThrow)\r\n \r\n     jest.spyOn(emailValidatorThrow, 'isValid').mockReturnValueOnce(false)\r\n     const httpRequest = {\r\n"
                },
                {
                    "date": 1659550999104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,11 +117,11 @@\n         throw new Error()        \r\n       }\r\n     }\r\n     const emailValidatorStub = new EmailValidatorStub()\r\n-    const sutThrow = new SignUpController(emailValidatorThrow)\r\n+    const sutThrow = new SignUpController(emailValidatorStub)\r\n \r\n-    jest.spyOn(emailValidatorThrow, 'isValid').mockReturnValueOnce(false)\r\n+    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'any_email@mail.com',\r\n"
                },
                {
                    "date": 1659551088410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,20 +117,18 @@\n         throw new Error()        \r\n       }\r\n     }\r\n     const emailValidatorStub = new EmailValidatorStub()\r\n-    const sutThrow = new SignUpController(emailValidatorStub)\r\n-\r\n-    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n+    const sut = new SignUpController(emailValidatorStub)\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'any_email@mail.com',\r\n         password: 'any_password',\r\n         passwordConfirmation: 'any_password'\r\n       }\r\n     }\r\n-    const httpResponse = sutThrow.handle(httpRequest)\r\n+    const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(500)\r\n     expect(httpResponse.body).toEqual(new ServerError())\r\n   })\r\n \r\n"
                },
                {
                    "date": 1659552096524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n-import { MissingParamError } from '../../../src/presentation/errors/missing-param-error'\r\n-import { InvalidParamError } from '../../../src/presentation/errors/invalid-param-error'\r\n+import { MissingParamError, InvalidParamError } from '../../../src/presentation/errors'\r\n import { EmailValidator } from '../../../src/presentation/protocols/email-validator'\r\n import { ServerError } from '../../../src/presentation/errors/server-error'\r\n \r\n interface SutTypes {\r\n"
                },
                {
                    "date": 1659552178049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n-import { MissingParamError, InvalidParamError } from '../../../src/presentation/errors'\r\n+import { MissingParamError, InvalidParamError, ServerError } from '../../../src/presentation/errors'\r\n import { EmailValidator } from '../../../src/presentation/protocols/email-validator'\r\n-import { ServerError } from '../../../src/presentation/errors/server-error'\r\n \r\n interface SutTypes {\r\n   sut: SignUpController\r\n   emailValidatorStub: EmailValidator\r\n"
                },
                {
                    "date": 1659552717746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n import { MissingParamError, InvalidParamError, ServerError } from '../../../src/presentation/errors'\r\n-import { EmailValidator } from '../../../src/presentation/protocols/email-validator'\r\n+import { EmailValidator } from '../../../src/presentation/protocols'\r\n \r\n interface SutTypes {\r\n   sut: SignUpController\r\n   emailValidatorStub: EmailValidator\r\n"
                },
                {
                    "date": 1659553006194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n+import { MissingParamError, InvalidParamError, ServerError } from '../../../src/presentation/errors'\r\n+import { EmailValidator } from '../../../src/presentation/protocols'\r\n+\r\n+interface SutTypes {\r\n+  sut: SignUpController\r\n+  emailValidatorStub: EmailValidator\r\n+}\r\n+\r\n+const makeEmailValidator = (): EmailValidator => {\r\n+  class EmailValidatorStub implements EmailValidator {\r\n+    isValid (email: string): boolean {\r\n+      return true\r\n+    }\r\n+  }\r\n+  return new EmailValidatorStub()\r\n+\r\n+}\r\n+\r\n+const makeSut = (): SutTypes => {\r\n+  class EmailValidatorStub implements EmailValidator {\r\n+    isValid (email: string): boolean {\r\n+      return true\r\n+    }\r\n+  }\r\n+  const emailValidatorStub = new EmailValidatorStub()\r\n+  const sut = new SignUpController(emailValidatorStub)\r\n+  return {\r\n+    sut,\r\n+    emailValidatorStub\r\n+  }\r\n+}\r\n+\r\n+describe('SignUp Controller', () => {\r\n+  test('Should return 400 if no name is provided', () => {\r\n+    const { sut } = makeSut()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        email: 'any_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('name'))\r\n+  })\r\n+\r\n+  test('Should return 400 if no email is provided', () => {\r\n+    const { sut } = makeSut()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n+  })\r\n+\r\n+  test('Should return 400 if no password is provided', () => {\r\n+    const { sut } = makeSut()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('password'))\r\n+  })\r\n+\r\n+  test('Should return 400 if no password confirmation is provided', () => {\r\n+    const { sut } = makeSut()\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        password: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n+  })\r\n+  \r\n+  test('Should return 400 if an invalid email is provided', () => {\r\n+    const { sut, emailValidatorStub } = makeSut()\r\n+    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'invalid_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new InvalidParamError('email'))\r\n+  })\r\n+\r\n+  test('Should call EmailValidator with correct email', () => {\r\n+    const { sut, emailValidatorStub } = makeSut()\r\n+    const isValidSpy = jest.spyOn(emailValidatorStub, 'isValid')\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    sut.handle(httpRequest)\r\n+    expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n+  })\r\n+\r\n+  test('Should return 500 if EmailValidator throws', () => {\r\n+    class EmailValidatorStub implements EmailValidator {\r\n+      isValid (email: string): boolean {\r\n+        throw new Error()        \r\n+      }\r\n+    }\r\n+    const emailValidatorStub = new EmailValidatorStub()\r\n+    const sut = new SignUpController(emailValidatorStub)\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'any_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'any_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(500)\r\n+    expect(httpResponse.body).toEqual(new ServerError())\r\n+  })\r\n+\r\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659553114125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,14 +17,9 @@\n \r\n }\r\n \r\n const makeSut = (): SutTypes => {\r\n-  class EmailValidatorStub implements EmailValidator {\r\n-    isValid (email: string): boolean {\r\n-      return true\r\n-    }\r\n-  }\r\n-  const emailValidatorStub = new EmailValidatorStub()\r\n+  const emailValidatorStub = makeEmailValidator()\r\n   const sut = new SignUpController(emailValidatorStub)\r\n   return {\r\n     sut,\r\n     emailValidatorStub\r\n@@ -119,14 +114,9 @@\n     expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n   })\r\n \r\n   test('Should return 500 if EmailValidator throws', () => {\r\n-    class EmailValidatorStub implements EmailValidator {\r\n-      isValid (email: string): boolean {\r\n-        throw new Error()        \r\n-      }\r\n-    }\r\n-    const emailValidatorStub = new EmailValidatorStub()\r\n+    const emailValidatorStub = makeEmailValidator()\r\n     const sut = new SignUpController(emailValidatorStub)\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n@@ -139,138 +129,5 @@\n     expect(httpResponse.statusCode).toBe(500)\r\n     expect(httpResponse.body).toEqual(new ServerError())\r\n   })\r\n \r\n-})\n-import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n-import { MissingParamError, InvalidParamError, ServerError } from '../../../src/presentation/errors'\r\n-import { EmailValidator } from '../../../src/presentation/protocols'\r\n-\r\n-interface SutTypes {\r\n-  sut: SignUpController\r\n-  emailValidatorStub: EmailValidator\r\n-}\r\n-\r\n-const makeSut = (): SutTypes => {\r\n-  class EmailValidatorStub implements EmailValidator {\r\n-    isValid (email: string): boolean {\r\n-      return true\r\n-    }\r\n-  }\r\n-  const emailValidatorStub = new EmailValidatorStub()\r\n-  const sut = new SignUpController(emailValidatorStub)\r\n-  return {\r\n-    sut,\r\n-    emailValidatorStub\r\n-  }\r\n-}\r\n-\r\n-describe('SignUp Controller', () => {\r\n-  test('Should return 400 if no name is provided', () => {\r\n-    const { sut } = makeSut()\r\n-    const httpRequest = {\r\n-      body: {\r\n-        email: 'any_email@mail.com',\r\n-        password: 'any_password',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new MissingParamError('name'))\r\n-  })\r\n-\r\n-  test('Should return 400 if no email is provided', () => {\r\n-    const { sut } = makeSut()\r\n-    const httpRequest = {\r\n-      body: {\r\n-        name: 'any_name',\r\n-        password: 'any_password',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new MissingParamError('email'))\r\n-  })\r\n-\r\n-  test('Should return 400 if no password is provided', () => {\r\n-    const { sut } = makeSut()\r\n-    const httpRequest = {\r\n-      body: {\r\n-        name: 'any_name',\r\n-        email: 'any_email@mail.com',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new MissingParamError('password'))\r\n-  })\r\n-\r\n-  test('Should return 400 if no password confirmation is provided', () => {\r\n-    const { sut } = makeSut()\r\n-    const httpRequest = {\r\n-      body: {\r\n-        name: 'any_name',\r\n-        email: 'any_email@mail.com',\r\n-        password: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n-  })\r\n-  \r\n-  test('Should return 400 if an invalid email is provided', () => {\r\n-    const { sut, emailValidatorStub } = makeSut()\r\n-    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n-    const httpRequest = {\r\n-      body: {\r\n-        name: 'any_name',\r\n-        email: 'invalid_email@mail.com',\r\n-        password: 'any_password',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new InvalidParamError('email'))\r\n-  })\r\n-\r\n-  test('Should call EmailValidator with correct email', () => {\r\n-    const { sut, emailValidatorStub } = makeSut()\r\n-    const isValidSpy = jest.spyOn(emailValidatorStub, 'isValid')\r\n-    const httpRequest = {\r\n-      body: {\r\n-        name: 'any_name',\r\n-        email: 'any_email@mail.com',\r\n-        password: 'any_password',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    sut.handle(httpRequest)\r\n-    expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n-  })\r\n-\r\n-  test('Should return 500 if EmailValidator throws', () => {\r\n-    class EmailValidatorStub implements EmailValidator {\r\n-      isValid (email: string): boolean {\r\n-        throw new Error()        \r\n-      }\r\n-    }\r\n-    const emailValidatorStub = new EmailValidatorStub()\r\n-    const sut = new SignUpController(emailValidatorStub)\r\n-    const httpRequest = {\r\n-      body: {\r\n-        name: 'any_name',\r\n-        email: 'any_email@mail.com',\r\n-        password: 'any_password',\r\n-        passwordConfirmation: 'any_password'\r\n-      }\r\n-    }\r\n-    const httpResponse = sut.handle(httpRequest)\r\n-    expect(httpResponse.statusCode).toBe(500)\r\n-    expect(httpResponse.body).toEqual(new ServerError())\r\n-  })\r\n-\r\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659553353617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,18 @@\n   return new EmailValidatorStub()\r\n \r\n }\r\n \r\n+const makeEmailValidatorWithError = (): EmailValidator => {\r\n+  class EmailValidatorStub implements EmailValidator {\r\n+    isValid (email: string): boolean {\r\n+      throw new Error()        \r\n+    }\r\n+  }\r\n+  return new EmailValidatorStub()\r\n+\r\n+}\r\n+\r\n const makeSut = (): SutTypes => {\r\n   const emailValidatorStub = makeEmailValidator()\r\n   const sut = new SignUpController(emailValidatorStub)\r\n   return {\r\n@@ -114,9 +124,9 @@\n     expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n   })\r\n \r\n   test('Should return 500 if EmailValidator throws', () => {\r\n-    const emailValidatorStub = makeEmailValidator()\r\n+    const emailValidatorStub = makeEmailValidatorWithError()\r\n     const sut = new SignUpController(emailValidatorStub)\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n"
                },
                {
                    "date": 1659554211892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,18 +16,8 @@\n   return new EmailValidatorStub()\r\n \r\n }\r\n \r\n-const makeEmailValidatorWithError = (): EmailValidator => {\r\n-  class EmailValidatorStub implements EmailValidator {\r\n-    isValid (email: string): boolean {\r\n-      throw new Error()        \r\n-    }\r\n-  }\r\n-  return new EmailValidatorStub()\r\n-\r\n-}\r\n-\r\n const makeSut = (): SutTypes => {\r\n   const emailValidatorStub = makeEmailValidator()\r\n   const sut = new SignUpController(emailValidatorStub)\r\n   return {\r\n@@ -124,10 +114,12 @@\n     expect(isValidSpy).toHaveBeenCalledWith('any_email@mail.com')\r\n   })\r\n \r\n   test('Should return 500 if EmailValidator throws', () => {\r\n-    const emailValidatorStub = makeEmailValidatorWithError()\r\n-    const sut = new SignUpController(emailValidatorStub)\r\n+    const { sut, emailValidatorStub } = makeSut()\r\n+    jest.spyOn(emailValidatorStub, 'isValid').mockImplementationOnce(() => {\r\n+      throw new Error()      \r\n+    })\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'any_email@mail.com',\r\n"
                },
                {
                    "date": 1659554443911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,24 @@\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n     expect(httpResponse.body).toEqual(new InvalidParamError('email'))\r\n   })\r\n+   \r\n+  test('Should return 400 if password confirmation fails', () => {\r\n+    const { sut } = makeSut()\r\n+    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n+    const httpRequest = {\r\n+      body: {\r\n+        name: 'any_name',\r\n+        email: 'invalid_email@mail.com',\r\n+        password: 'any_password',\r\n+        passwordConfirmation: 'invalid_password'\r\n+      }\r\n+    }\r\n+    const httpResponse = sut.handle(httpRequest)\r\n+    expect(httpResponse.statusCode).toBe(400)\r\n+    expect(httpResponse.body).toEqual(new InvalidParamError('passwordConfirmation'))\r\n+  })\r\n \r\n   test('Should call EmailValidator with correct email', () => {\r\n     const { sut, emailValidatorStub } = makeSut()\r\n     const isValidSpy = jest.spyOn(emailValidatorStub, 'isValid')\r\n"
                },
                {
                    "date": 1659554481533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,8 @@\n   })\r\n    \r\n   test('Should return 400 if password confirmation fails', () => {\r\n     const { sut } = makeSut()\r\n-    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'invalid_email@mail.com',\r\n"
                },
                {
                    "date": 1659555277492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,38 +81,38 @@\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n     expect(httpResponse.body).toEqual(new MissingParamError('passwordConfirmation'))\r\n   })\r\n-  \r\n-  test('Should return 400 if an invalid email is provided', () => {\r\n-    const { sut, emailValidatorStub } = makeSut()\r\n-    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n+   \r\n+  test('Should return 400 if password confirmation fails', () => {\r\n+    const { sut } = makeSut()\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n-        email: 'invalid_email@mail.com',\r\n+        email: 'any_email@mail.com',\r\n         password: 'any_password',\r\n-        passwordConfirmation: 'any_password'\r\n+        passwordConfirmation: 'invalid_password'\r\n       }\r\n     }\r\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new InvalidParamError('email'))\r\n+    expect(httpResponse.body).toEqual(new InvalidParamError('passwordConfirmation'))\r\n   })\r\n-   \r\n-  test('Should return 400 if password confirmation fails', () => {\r\n-    const { sut } = makeSut()\r\n+\r\n+  test('Should return 400 if an invalid email is provided', () => {\r\n+    const { sut, emailValidatorStub } = makeSut()\r\n+    jest.spyOn(emailValidatorStub, 'isValid').mockReturnValueOnce(false)\r\n     const httpRequest = {\r\n       body: {\r\n         name: 'any_name',\r\n         email: 'invalid_email@mail.com',\r\n         password: 'any_password',\r\n-        passwordConfirmation: 'invalid_password'\r\n+        passwordConfirmation: 'any_password'\r\n       }\r\n     }\r\n     const httpResponse = sut.handle(httpRequest)\r\n     expect(httpResponse.statusCode).toBe(400)\r\n-    expect(httpResponse.body).toEqual(new InvalidParamError('passwordConfirmation'))\r\n+    expect(httpResponse.body).toEqual(new InvalidParamError('email'))\r\n   })\r\n \r\n   test('Should call EmailValidator with correct email', () => {\r\n     const { sut, emailValidatorStub } = makeSut()\r\n"
                }
            ],
            "date": 1659534006938,
            "name": "Commit-0",
            "content": "import { SignUpController } from '../../../src/presentation/controllers/signup'\r\n\r\ndescribe('SignUp Controller', () => {\r\n  test('Should return 400 if no name is provided', () => {\r\n    const sut = new SignUpController()\r\n    const httpRequest = {\r\n      body: {\r\n       // name: 'any_name',\r\n        email: 'any_email@mail.com',\r\n        password: 'any_password',\r\n        passwordConfirmation: 'any_password'\r\n      }\r\n    }\r\n    const httpResponse = sut.handle(httpRequest)\r\n    expect(httpResponse.statusCode).toBe(400)\r\n    expect(httpResponse.body).toEqual(new Error('Missing param: name'))\r\n  })\r\n})"
        }
    ]
}