{
    "sourceFile": "src/presentation/controllers/signup.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1659534140763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1659534811249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,19 @@\n export class SignUpController {\r\n \r\n   handle (httpRequest: any): any {\r\n-    return {\r\n-      statusCode: 400,\r\n-      body: new Error('Missing param: name')\r\n+\r\n+    if (!httpRequest.body.name) {\r\n+      return {\r\n+        statusCode: 400,\r\n+        body: new Error('Missing param: name')\r\n+      }  \r\n     }\r\n+    if (!httpRequest.body.email) {\r\n+      return {\r\n+        statusCode: 400,\r\n+        body: new Error('Missing param: email')\r\n+      }  \r\n+    }\r\n   }\r\n   \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659536452538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n+import { HttpResponse, HttpRequest } from '../protocols/http'\r\n export class SignUpController {\r\n \r\n-  handle (httpRequest: any): any {\r\n+  handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n     if (!httpRequest.body.name) {\r\n       return {\r\n         statusCode: 400,\r\n"
                },
                {
                    "date": 1659537333296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,20 @@\n import { HttpResponse, HttpRequest } from '../protocols/http'\r\n+import { MissingParamError } from '../errors/missing-param-error'\r\n export class SignUpController {\r\n \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n     if (!httpRequest.body.name) {\r\n       return {\r\n         statusCode: 400,\r\n-        body: new Error('Missing param: name')\r\n+        body: new MissingParamError('Missing param: name')\r\n       }  \r\n     }\r\n     if (!httpRequest.body.email) {\r\n       return {\r\n         statusCode: 400,\r\n-        body: new Error('Missing param: email')\r\n+        body: new MissingParamError('Missing param: email')\r\n       }  \r\n     }\r\n   }\r\n   \r\n"
                },
                {
                    "date": 1659537525374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n \r\n     if (!httpRequest.body.name) {\r\n       return {\r\n         statusCode: 400,\r\n-        body: new MissingParamError('Missing param: name')\r\n+        body: new MissingParamError('name')\r\n       }  \r\n     }\r\n     if (!httpRequest.body.email) {\r\n       return {\r\n         statusCode: 400,\r\n-        body: new MissingParamError('Missing param: email')\r\n+        body: new MissingParamError('email')\r\n       }  \r\n     }\r\n   }\r\n   \r\n"
                },
                {
                    "date": 1659538202282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,16 @@\n import { HttpResponse, HttpRequest } from '../protocols/http'\r\n import { MissingParamError } from '../errors/missing-param-error'\r\n+import { badRequest } from '../helpers/http-helper'\r\n export class SignUpController {\r\n \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n     if (!httpRequest.body.name) {\r\n-      return {\r\n-        statusCode: 400,\r\n-        body: new MissingParamError('name')\r\n-      }  \r\n+      return badRequest(new MissingParamError('name'))  \r\n     }\r\n     if (!httpRequest.body.email) {\r\n-      return {\r\n-        statusCode: 400,\r\n-        body: new MissingParamError('email')\r\n-      }  \r\n+      return badRequest(new MissingParamError('email'))  \r\n     }\r\n   }\r\n   \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659542992607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,15 @@\n     }\r\n     if (!httpRequest.body.email) {\r\n       return badRequest(new MissingParamError('email'))  \r\n     }\r\n+\r\n+    const requiredFields = ['name', 'email']\r\n+    for (const field of requiredFields) {\r\n+      if (!`httpRequest.body.${field}`) {\r\n+        return badRequest(new MissingParamError(field))  \r\n+      }\r\n+  \r\n+    }\r\n   }\r\n   \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659543037259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,11 @@\n export class SignUpController {\r\n \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n-    if (!httpRequest.body.name) {\r\n-      return badRequest(new MissingParamError('name'))  \r\n-    }\r\n-    if (!httpRequest.body.email) {\r\n-      return badRequest(new MissingParamError('email'))  \r\n-    }\r\n-\r\n     const requiredFields = ['name', 'email']\r\n     for (const field of requiredFields) {\r\n-      if (!`httpRequest.body.${field}`) {\r\n+      if (!httpRequest.body[field]) {\r\n         return badRequest(new MissingParamError(field))  \r\n       }\r\n   \r\n     }\r\n"
                },
                {
                    "date": 1659543429996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n export class SignUpController {\r\n \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n-    const requiredFields = ['name', 'email']\r\n+    const requiredFields = ['name', 'email', 'password']\r\n     for (const field of requiredFields) {\r\n       if (!httpRequest.body[field]) {\r\n         return badRequest(new MissingParamError(field))  \r\n       }\r\n"
                },
                {
                    "date": 1659543920877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n export class SignUpController {\r\n \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n-    const requiredFields = ['name', 'email', 'password']\r\n+    const requiredFields = ['name', 'email', 'password', 'passwordConfirmation']\r\n     for (const field of requiredFields) {\r\n       if (!httpRequest.body[field]) {\r\n         return badRequest(new MissingParamError(field))  \r\n       }\r\n"
                },
                {
                    "date": 1659544814520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { HttpResponse, HttpRequest } from '../protocols/http'\r\n import { MissingParamError } from '../errors/missing-param-error'\r\n import { badRequest } from '../helpers/http-helper'\r\n-export class SignUpController {\r\n+import { Controller } from '../protocols/controller'\r\n+export class SignUpController implements Controller {\r\n \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n     const requiredFields = ['name', 'email', 'password', 'passwordConfirmation']\r\n"
                },
                {
                    "date": 1659546606653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,16 @@\n import { HttpResponse, HttpRequest } from '../protocols/http'\r\n import { MissingParamError } from '../errors/missing-param-error'\r\n import { badRequest } from '../helpers/http-helper'\r\n import { Controller } from '../protocols/controller'\r\n+import { EmailValidator } from '../protocols/email-validator'\r\n+\r\n export class SignUpController implements Controller {\r\n \r\n+  constructor (emailValidator: EmailValidator) {\r\n+\r\n+  }\r\n+  \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n     const requiredFields = ['name', 'email', 'password', 'passwordConfirmation']\r\n     for (const field of requiredFields) {\r\n"
                },
                {
                    "date": 1659546686153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,14 @@\n import { EmailValidator } from '../protocols/email-validator'\r\n \r\n export class SignUpController implements Controller {\r\n \r\n+  private readonly emailValidator: EmailValidator\r\n+\r\n   constructor (emailValidator: EmailValidator) {\r\n+    this.emailValidator = emailValidator\r\n+  }\r\n \r\n-  }\r\n-  \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n \r\n     const requiredFields = ['name', 'email', 'password', 'passwordConfirmation']\r\n     for (const field of requiredFields) {\r\n"
                },
                {
                    "date": 1659546948886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     for (const field of requiredFields) {\r\n       if (!httpRequest.body[field]) {\r\n         return badRequest(new MissingParamError(field))  \r\n       }\r\n-  \r\n     }\r\n+    this.emailValidator.isValid(httpRequest.body.email)\r\n   }\r\n   \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659547050469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { MissingParamError } from '../errors/missing-param-error'\r\n import { badRequest } from '../helpers/http-helper'\r\n import { Controller } from '../protocols/controller'\r\n import { EmailValidator } from '../protocols/email-validator'\r\n+import { InvalidParamError } from '../errors/invalid-param-error'\r\n \r\n export class SignUpController implements Controller {\r\n \r\n   private readonly emailValidator: EmailValidator\r\n@@ -19,8 +20,12 @@\n       if (!httpRequest.body[field]) {\r\n         return badRequest(new MissingParamError(field))  \r\n       }\r\n     }\r\n-    this.emailValidator.isValid(httpRequest.body.email)\r\n+    const isValid = this.emailValidator.isValid(httpRequest.body.email)\r\n+\r\n+    if (!isValid) {\r\n+      return badRequest(new InvalidParamError('email'))\r\n+    }\r\n   }\r\n   \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659549132598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       if (!httpRequest.body[field]) {\r\n         return badRequest(new MissingParamError(field))  \r\n       }\r\n     }\r\n-    const isValid = this.emailValidator.isValid(httpRequest.body.email)\r\n+    const isValid = this.emailValidator.isValid('outro@email.com')\r\n \r\n     if (!isValid) {\r\n       return badRequest(new InvalidParamError('email'))\r\n     }\r\n"
                },
                {
                    "date": 1659549177999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       if (!httpRequest.body[field]) {\r\n         return badRequest(new MissingParamError(field))  \r\n       }\r\n     }\r\n-    const isValid = this.emailValidator.isValid('outro@email.com')\r\n+    const isValid = this.emailValidator.isValid(httpRequest.body.email)\r\n \r\n     if (!isValid) {\r\n       return badRequest(new InvalidParamError('email'))\r\n     }\r\n"
                },
                {
                    "date": 1659550792348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { badRequest } from '../helpers/http-helper'\r\n import { Controller } from '../protocols/controller'\r\n import { EmailValidator } from '../protocols/email-validator'\r\n import { InvalidParamError } from '../errors/invalid-param-error'\r\n+import { ServerError } from '../errors/server-error'\r\n \r\n export class SignUpController implements Controller {\r\n \r\n   private readonly emailValidator: EmailValidator\r\n@@ -13,19 +14,25 @@\n     this.emailValidator = emailValidator\r\n   }\r\n \r\n   handle (httpRequest: HttpRequest): HttpResponse {\r\n+    try {\r\n+      const requiredFields = ['name', 'email', 'password', 'passwordConfirmation']\r\n+      for (const field of requiredFields) {\r\n+        if (!httpRequest.body[field]) {\r\n+          return badRequest(new MissingParamError(field))  \r\n+        }\r\n+      }\r\n+      const isValid = this.emailValidator.isValid(httpRequest.body.email)\r\n+      if (!isValid) {\r\n+        return badRequest(new InvalidParamError('email'))\r\n+      }\r\n+    } catch (error) {\r\n+      return {\r\n+        statusCode: 500,\r\n+        body: new ServerError()\r\n \r\n-    const requiredFields = ['name', 'email', 'password', 'passwordConfirmation']\r\n-    for (const field of requiredFields) {\r\n-      if (!httpRequest.body[field]) {\r\n-        return badRequest(new MissingParamError(field))  \r\n       }\r\n     }\r\n-    const isValid = this.emailValidator.isValid(httpRequest.body.email)\r\n-\r\n-    if (!isValid) {\r\n-      return badRequest(new InvalidParamError('email'))\r\n-    }\r\n   }\r\n   \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659551676111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { HttpResponse, HttpRequest } from '../protocols/http'\r\n import { MissingParamError } from '../errors/missing-param-error'\r\n-import { badRequest } from '../helpers/http-helper'\r\n+import { badRequest, serverError } from '../helpers/http-helper'\r\n import { Controller } from '../protocols/controller'\r\n import { EmailValidator } from '../protocols/email-validator'\r\n import { InvalidParamError } from '../errors/invalid-param-error'\r\n import { ServerError } from '../errors/server-error'\r\n@@ -26,11 +26,9 @@\n       if (!isValid) {\r\n         return badRequest(new InvalidParamError('email'))\r\n       }\r\n     } catch (error) {\r\n-      return {\r\n-        statusCode: 500,\r\n-        body: new ServerError()\r\n+      return serverError()\r\n \r\n       }\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1659551698904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,8 @@\n         return badRequest(new InvalidParamError('email'))\r\n       }\r\n     } catch (error) {\r\n       return serverError()\r\n-\r\n-      }\r\n     }\r\n   }\r\n   \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659551739501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import { badRequest, serverError } from '../helpers/http-helper'\r\n import { Controller } from '../protocols/controller'\r\n import { EmailValidator } from '../protocols/email-validator'\r\n import { InvalidParamError } from '../errors/invalid-param-error'\r\n-import { ServerError } from '../errors/server-error'\r\n \r\n export class SignUpController implements Controller {\r\n \r\n   private readonly emailValidator: EmailValidator\r\n"
                },
                {
                    "date": 1659552019079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n import { HttpResponse, HttpRequest } from '../protocols/http'\r\n-import { MissingParamError } from '../errors/missing-param-error'\r\n+import { MissingParamError, InvalidParamError } from '../errors'\r\n import { badRequest, serverError } from '../helpers/http-helper'\r\n import { Controller } from '../protocols/controller'\r\n import { EmailValidator } from '../protocols/email-validator'\r\n-import { InvalidParamError } from '../errors/invalid-param-error'\r\n \r\n export class SignUpController implements Controller {\r\n \r\n   private readonly emailValidator: EmailValidator\r\n"
                }
            ],
            "date": 1659534140763,
            "name": "Commit-0",
            "content": "export class SignUpController {\r\n\r\n  handle (httpRequest: any): any {\r\n    return {\r\n      statusCode: 400,\r\n      body: new Error('Missing param: name')\r\n    }\r\n  }\r\n  \r\n}"
        }
    ]
}